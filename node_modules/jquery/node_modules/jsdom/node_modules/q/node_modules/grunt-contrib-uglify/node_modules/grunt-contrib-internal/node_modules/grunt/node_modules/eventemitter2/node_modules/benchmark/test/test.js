;(function(window, undefined) {
  'use strict';

  /** Use a single load function */
  var load = typeof require == 'function' ? require : window.load;

  /** The `platform` object to check */
  var platform =
    window.platform ||
    load('../vendor/platform.js/platform.js') ||
    window.platform;

  /** The unit testing framework */
  var QUnit =
    window.QUnit || (
      window.setTimeout || (window.addEventListener = window.setTimeout = / /),
      window.QUnit = load('../vendor/qunit/qunit/qunit' + (platform.name == 'Narwhal' ? '-1.8.0' : '') + '.js') || window.QUnit,
      load('../vendor/qunit-clib/qunit-clib.js'),
      (window.addEventListener || 0).test && delete window.addEventListener,
      window.QUnit
    );

  /** The `Benchmark` constructor to test */
  var Benchmark =
    window.Benchmark || (
      Benchmark = load('../benchmark.js') || window.Benchmark,
      Benchmark.Benchmark || Benchmark
    );

  /** API shortcut */
  var forOwn = Benchmark.forOwn;

  /** Used to get property descriptors */
  var getDescriptor = Object.getOwnPropertyDescriptor;

  /** Used to set property descriptors */
  var setDescriptor = Object.defineProperty;

  /** Shortcut used to convert array-like objects to arrays */
  var slice = [].slice;

  /** Used to resolve a value's internal [[Class]] */
  var toString = {}.toString;

  /** Used to check problem JScript properties (a.k.a. the [[DontEnum]] bug) */
  var shadowed = {
    'constructor': 1,
    'hasOwnProperty': 2,
    'isPrototypeOf': 3,
    'propertyIsEnumerable': 4,
    'toLocaleString': 5,
    'toString': 6,
    'valueOf': 7
  };

  /** Used to flag environments/features */
  var support = {
    'descriptors': !!function() {
      try {
        var o = {};
        return (setDescriptor(o, o, o), 'value' in getDescriptor(o, o));
      } catch(e) { }
    }()
  };

  /*--------------------------------------------------------------------------*/

  /**
   * Skips a given number of tests with a passing result.
   *
   * @private
   * @param {Number} [count=1] The number of tests to skip.
   */
  function skipTest(count) {
    count || (count = 1);
    while (count--) {
      ok(true, 'test skipped');
    }
  }

  /*--------------------------------------------------------------------------*/

  // init Benchmark.options.minTime
  Benchmark(function() { throw 0; }).run();

  // set a shorter max time
  Benchmark.options.maxTime = Benchmark.options.minTime * 5;

  // explicitly call `QUnit.module()` instead of `module()`
  // in case we are in a CLI environment
  QUnit.module('Benchmark');

  (function() {
    test('has the default `Benchmark.platform` value', function() {
      if (window.document) {
        equal(String(Benchmark.platform), navigator.userAgent);
      } else {
        skipTest(1)
      }
    });

    test('supports loading Benchmark.js as a module', function() {
      if (window.document && window.require) {
        equal((Benchmark2 || {}).version, Benchmark.version);
      } else {
        skipTest(1)
      }
    });

    test('supports loading Platform.js as a module', function() {
      if (window.document && window.require) {
        var platform = (Benchmark2 || {}).platform || {};
        equal(typeof platform.name, 'string');
      } else {
        skipTest(1)
      }
    });
  }());

  /*--------------------------------------------------------------------------*/

  QUnit.module('Benchmark constructor');

  (function() {
    test('creates a new instance when called without the `new` operator', function() {
      ok(Benchmark() instanceof Benchmark);
    });

    test('supports passing an options object', function() {
      var bench = Benchmark({ 'name': 'foo', 'fn': function() { } });
      ok(bench.fn && bench.name == 'foo');
    });

    test('supports passing a "name" and "fn" argument', function() {
      var bench = Benchmark('foo', function() { });
      ok(bench.fn && bench.name == 'foo');
    });

    test('supports passing a "name" argument and an options object', function() {
      var bench = Benchmark('foo', { 'fn': function() { } });
      ok(bench.fn && bench.name == 'foo');
    });

    test('supports passing a "name" argument and an options object', function() {
      var bench = Benchmark('foo', function() { }, { 'id': 'bar' });
      ok(bench.fn && bench.name == 'foo' && bench.id == 'bar');
    });

    test('supports passing an empy string for the "fn" options property', function() {
      var bench = Benchmark({ 'fn': '' }).run();
      ok(!bench.error);
    });

    test('detects dead code', function() {
      var bench = Benchmark(function() { }).run();
      ok(/setup\(\)/.test(bench.compiled) ? !bench.error : bench.error);
    });
  }());

  /*--------------------------------------------------------------------------*/

  QUnit.module('Benchmark compilation');

  (function() {
    test('compiles using the default `Function#toString`', function() {
      var bench = Benchmark({
        'setup': function() { var a = 1; },
        'fn': function() { throw a; },
        'teardown': function() { a = 2; }
      }).run();

      var compiled = bench.compiled;
      if (/setup\(\)/.test(compiled)) {
        skipTest();
      }
      else {
        ok(/var a\s*=\s*1/.test(compiled) && /throw a/.test(compiled) && /a\s*=\s*2/.test(compiled));
      }
    });

    test('compiles using a custom "toString" method', function() {
      var bench = Benchmark({
        'setup': function() { },
        'fn': function() { },
        'teardown': function() { }
      });

      bench.setup.toString = function() { return 'var a = 1;' };
      bench.fn.toString = function() { return 'throw a;' };
      bench.teardown.toString = function() { return 'a = 2;' };
      bench.run();

      var compiled = bench.compiled;
      if (/setup\(\)/.test(compiled)) {
        skipTest();
      }
      else {
        ok(/var a\s*=\s*1/.test(compiled) && /throw a/.test(compiled) && /a\s*=\s*2/.test(compiled));
      }
    });

    test('compiles using a string value', function() {
      var bench = Benchmark({
        'setup': 'var a = 1;',
        'fn': 'throw a;',
        'teardown': 'a = 2;'
      }).run();

      var compiled = bench.compiled;
      if (/setup\(\)/.test(compiled)) {
        skipTest();
      }
      else {
        ok(/var a\s*=\s*1/.test(compiled) && /throw a/.test(compiled) && /a\s*=\s*2/.test(compiled));
      }
    });
  }());

  /*--------------------------------------------------------------------------*/

  QUnit.module('Benchmark test binding');

  (function() {
    var count = 0;

    var tests = {
      'inlined "setup", "fn", and "teardown"': (
        'if(/ops/.test(this))this._fn=true;'
      ),
      'called "fn" and inlined "setup"/"teardown" reached by error': function() {
        count++;
        if (/ops/.test(this)) {
          this._fn = true;
        }
      },
      'called "fn" and inlined "setup"/"teardown" reached by `return` statement': function() {
        if (/ops/.test(this)) {
          this._fn = true;
        }
        return;
      }
    };

    forOwn(tests, function(fn, title) {
      test('has correct binding for ' + title, function() {
        var bench = Benchmark({
          'setup': 'if(/ops/.test(this))this._setup=true;',
          'fn': fn,
          'teardown': 'if(/ops/.test(this))this._teardown=true;',
          'onCycle': function() { this.abort(); }
        }).run();

        var compiled = bench.compiled;
        if (/setup\(\)/.test(compiled)) {
          skipTest(3);
        }
        else {
          ok(bench._setup, 'correct binding for "setup"');
          ok(bench._fn, 'correct binding for "fn"');
          ok(bench._teardown, 'correct binding for "teardown"');
        }
      });
    });
  }());

  /*--------------------------------------------------------------------------*/

  QUnit.module('Benchmark.deepClone');

  (function() {
    function createCircularObject() {
      var result = {
        'foo': { 'b': { 'foo': { 'c': { } } } },
        'bar': { }
      };

      result.foo.b.foo.c.foo = result;
      result.bar.b = result.foo.b;
      return result;
    }

    function Klass() {
      this.a = 1;
    }

    Klass.prototype = { 'b': 1 };

    var notCloneable = {
      'an arguments object': arguments,
      'an element': window.document && document.body,
      'a function': Klass,
      'a Klass instance': new Klass
    };

    var objects = {
      'an array': ['a', 'b', 'c', ''],
      'an array-like-object': { '0': 'a', '1': 'b', '2': 'c',  '3': '', 'length': 5 },
      'boolean': false,
      'boolean object': Object(false),
      'an object': { 'a': 0, 'b': 1, 'c': 3 },
      'an object with object values': { 'a': /a/, 'b': ['B'], 'c': { 'C': 1 } },
      'null': null,
      'a number': 3,
      'a number object': Object(3),
      'a regexp': /x/gim,
      'a string': 'x',
      'a string object': Object('x'),
      'undefined': undefined
    };

    objects['an array'].length = 5;

    forOwn(objects, function(object, key) {
      test('clones ' + key + ' correctly', function() {
        var kind = toString.call(object),
            clone = Benchmark.deepClone(object);

        if (object == null) {
          equal(clone, object);
        } else {
          deepEqual(clone.valueOf(), object.valueOf());
        }
        if (object === Object(object)) {
          ok(clone !== object);
        } else {
          skipTest();
        }
      });
    });

    forOwn(notCloneable, function(object, key) {
      test('does not clone ' + key, function() {
        ok(Benchmark.deepClone(object) === object);
      });
    });

    test('clones using Klass#deepClone', function() {
      var object = new Klass;
      Klass.prototype.deepClone = function() { return new Klass; };

      var clone = Benchmark.deepClone(object);
      ok(clone !== object && clone instanceof Klass);

      delete Klass.prototype.clone;
    });

    test('clones problem JScript properties', function() {
      var clone = Benchmark.deepClone(shadowed);
      deepEqual(clone, shadowed);
    });

    test('clones string object with custom property', function() {
      var object = new String('x');
      object.x = 1;

      var clone = Benchmark.deepClone(object);
      ok(clone == 'x' && typeof clone == 'object' && clone.x === 1 && toString.call(clone) == '[object String]');
    });

    test('clones objects with circular references', function() {
      var object = createCircularObject(),
          clone = Benchmark.deepClone(object);

      ok(clone.bar.b === clone.foo.b && clone === clone.foo.b.foo.c.foo && clone !== object);
    });

    test('clones non-extensible objects with circular references', function() {
      if (Object.preventExtensions) {
        var object = Object.preventExtensions(createCircularObject());
        Object.preventExtensions(object.bar.b);

        var clone = Benchmark.deepClone(object);
        ok(clone.bar.b === clone.foo.b && clone === clone.foo.b.foo.c.foo && clone !== object);
      } else {
        skipTest(1)
      }
    });

    test('clones sealed objects with circular references', function() {
      if (Object.seal) {
        var object = Object.seal(createCircularObject());
        Object.seal(object.bar.b);

        var clone = Benchmark.deepClone(object);
        ok(clone.bar.b === clone.foo.b && clone === clone.foo.b.foo.c.foo && clone !== object);
      } else {
        skipTest(1)
      }
    });

    test('clones frozen objects with circular references', function() {
      if (Object.freeze) {
        var object = Object.freeze(createCircularObject());
        Object.freeze(object.bar.b);

        var clone = Benchmark.deepClone(object);
        ok(clone.bar.b === clone.foo.b && clone === clone.foo.b.foo.c.foo && clone !== object);
      } else {
        skipTest(1)
      }
    });

    test('clones objects with custom descriptors and circular references', function() {
      var accessor,
          descriptor;

      if (support.descriptors) {
        var object = setDescriptor({}, 'foo', {
          'configurable': true,
          'value': setDescriptor({}, 'b', {
            'writable': true,
            'value': setDescriptor({}, 'foo', {
              'get': function() { return accessor; },
              'set': function(value) { accessor = value; }
            })
          })
        });

        setDescriptor(object, 'bar', { 'value': {} });
        object.foo.b.foo = { 'c': object };
        object.bar.b = object.foo.b;

        var clone = Benchmark.deepClone(object);
        ok(clone !== object &&
          clone.bar.b === clone.foo.b &&
          clone !== clone.foo.b.foo.c.foo &&
          (descriptor = getDescriptor(clone, 'foo')) &&
          descriptor.configurable && !(descriptor.enumerable && descriptor.writable) &&
          (descriptor = getDescriptor(clone.foo, 'b')) &&
          descriptor.writable && !(descriptor.configurable && descriptor.enumerable) &&
          (descriptor = getDescriptor(clone.foo.b, 'foo')) &&
          descriptor.get && descriptor.set &&
          (descriptor = getDescriptor(clone.foo.b, 'foo')) &&
          !(descriptor.configurable && descriptor.enumerable && descriptor.writable) &&
          (descriptor = getDescriptor(clone, 'bar')) &&
          !(descriptor.configurable && descriptor.enumerable && descriptor.writable));
      }
      else {
        skipTest(1)
      }
    });
  }());

  /*--------------------------------------------------------------------------*/

  QUnit.module('Benchmark.each');

  (function() {
    var xpathResult;

    var objects = {
      'array': ['a', 'b', 'c', ''],
      'array-like-object': { '0': 'a', '1': 'b', '2': 'c',  '3': '', 'length': 5 },
      'xpath snapshot': null
    };

    if (window.document && document.evaluate) {
      xpathResult = [document.documentElement, document.getElementsByTagName('head')[0], document.body];
      objects['xpath snapshot'] = document.evaluate('//*[self::html or self::head or self::body]', document, null, 7, null);
    }

    objects.array.length = 5;

    forOwn(objects, function(object, key) {
      test('passes the correct arguments when passing an ' + key, function() {
        if (object) {
          var args
          Benchmark.each(object, function() {
            args || (args = slice.call(arguments));
          });

          if (key == 'xpath snapshot') {
            ok(args[0] === xpathResult[0]);
          } else {
            equal(args[0], 'a');
          }
          equal(args[1], 0);
          ok(args[2] === object);
        }
        else {
          skipTest(3);
        }
      });

      test('returns the passed object when passing an ' + key, function() {
        if (object) {
          var actual = Benchmark.each(object, function() { });
          ok(actual === object);
        }
        else {
          skipTest();
        }
      });

      test('iterates over all indexes when passing an ' + key, function() {
        if (object) {
          var values = [];
          Benchmark.each(object, function(value) {
            values.push(value);
          });

          deepEqual(values, key == 'xpath snapshot' ? xpathResult : ['a', 'b', 'c', '']);
        }
        else {
          skipTest();
        }
      });

      test('exits early when returning `false` when passing an ' + key, function() {
        if (object) {
          var values = [];
          Benchmark.each(object, function(value) {
            values.push(value);
            return values.length < 2;
          });

          deepEqual(values, key == 'xpath snapshot' ? xpathResult.slice(0, 2) : ['a', 'b']);
        }
        else {
          skipTest();
        }
      });
    });

    test('passes the third callback argument as an object', function() {
      var thirdArg;
      Benchmark.each('hello', function(value, index, object) {
        thirdArg = object;
      });

      ok(thirdArg && typeof thirdArg == 'object');
    });

    test('iterates over strings by index', function() {
      var values = [];
      Benchmark.each('hello', function(value) {
        values.push(value)
      });

      deepEqual(values, ['h', 'e', 'l', 'l', 'o']);
    });
  }());

  /*--------------------------------------------------------------------------*/

  QUnit.module('Benchmark.extend');

  (function() {
    test('allows no source argument', function() {
      var object = {};
      equal(Benchmark.extend(object), object);
    });

    test('allows a single source argument', function() {
      var source = { 'x': 1, 'y': 1 },
          actual = Benchmark.extend({}, source);

      deepEqual(Benchmark.extend({}, source), { 'x': 1, 'y': 1 });
    });

    test('allows multiple source arguments', function() {
      var source1 = { 'x': 1, 'y': 1 },
          source2 = { 'y': 2, 'z': 2 },
          actual = Benchmark.extend({}, source1, source2);

      deepEqual(actual, { 'x': 1, 'y': 2, 'z': 2 });
    });

    test('will add inherited source properties', function() {
      function Source() { }
      Source.prototype.x = 1;
      deepEqual(Benchmark.extend({}, new Source), { 'x': 1 });
    });

    test('will add problem JScript properties', function() {
      deepEqual(Benchmark.extend({}, shadowed), shadowed);
    });
  }());

  /*--------------------------------------------------------------------------*/

  QUnit.module('Benchmark.filter');

  (function() {
    var objects = {
      'array': ['a', 'b', 'c', ''],
      'array-like-object': { '0': 'a', '1': 'b', '2': 'c',  '3': '', 'length': 5 }
    };

    objects.array.length = 5;

    forOwn(objects, function(object, key) {
      test('passes the correct arguments when passing an ' + key, function() {
        var args;
        Benchmark.filter(object, function() {
          args || (args = slice.call(arguments));
        });

        deepEqual(args, ['a', 0, object]);
   