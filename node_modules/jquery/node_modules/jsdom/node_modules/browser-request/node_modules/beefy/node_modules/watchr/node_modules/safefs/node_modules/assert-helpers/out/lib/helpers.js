// Generated by CoffeeScript 1.9.1
(function() {
  var assert, helpers, util,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  util = require('util');

  assert = require('assert');

  helpers = module.exports;

  helpers.wait = function(delay, fn) {
    return setTimeout(fn, delay);
  };

  helpers.isTTY = function() {
    var ref, ref1;
    return ((ref = process.stdout) != null ? ref.isTTY : void 0) === true && ((ref1 = process.stderr) != null ? ref1.isTTY : void 0) === true;
  };

  helpers.inspect = function(obj, opts) {
    if (opts == null) {
      opts = {};
    }
    if (helpers.isTTY()) {
      if (opts.colors == null) {
        opts.colors = indexOf.call(process.argv, '--no-colors') < 0;
      }
    } else {
      opts.colors = false;
    }
    if (typeof obj === 'string') {
      return obj;
    } else {
      return util.inspect(obj, opts);
    }
  };

  helpers.throwUnexpected = function() {
    throw new Error('this error is unexpected');
  };

  helpers.equal = helpers.assertEqual = function(argsActual, argsExpected, testName) {
    var checkError;
    try {
      return assert.equal(argsActual, argsExpected, testName);
    } catch (_error) {
      checkError = _error;
      process.stderr.write("------------------------------------\nComparison Error:\n" + (helpers.inspect(checkError.stack)) + "\n\nComparison Actual:\n" + (helpers.inspect(argsActual)) + "\n\nComparison Expected:\n" + (helpers.inspect(argsExpected)) + "\n------------------------------------\n");
      throw checkError;
    }
  };

  helpers.deepEqual = helpers.assertDeepEqual = function(argsActual, argsExpected, testName) {
    var checkError;
    try {
      return assert.deepEqual(argsActual, argsExpected, testName);
    } catch (_error) {
      checkError = _error;
      process.stderr.write("------------------------------------\n\nComparison Error:\n" + (helpers.inspect(checkError.stack)) + "\n\nComparison Actual:\n" + (helpers.inspect(argsActual)) + "\n\nComparison Expected:\n" + (helpers.inspect(argsExpected)) + "\n------------------------------------\n");
      throw checkError;
    }
  };

  helpers.contains = function(actual, expected, testName) {
    if (testName == null) {
      testName = "Expected `" + actual + "` to contain `" + expected + "`";
    }
    return assert.ok(actual.indexOf(expected) !== -1, testName);
  };

  helpers.errorEqual = helpers.assertErrorEqual = function(actualError, expectedError, testName) {
    var actualErrorMessage, checkError, expectedErrorMessage;
    if (expectedError) {
      if (expectedError instanceof Error) {
        expectedErrorMessage = expectedError.message;
      } else {
        expectedErrorMessage = expectedError;
        expectedError = new Error(expectedErrorMessage);
      }
    }
    if (actualError) {
      if (actualError instanceof Error) {
        actualErrorMessage = actualError.message;
      } else {
        actualErrorMessage = actualError;
        actualError = new Error(actualErrorMessage);
      }
    }
    try {
      if (actualErrorMessage && expectedErrorMessage) {
        helpers.contains(actualErrorMessage, expectedErrorMessage, testName);
      } else {
        helpers.equal(actualError, expectedError, testName);
      }
    } catch (_error) {
      checkError = _error;
      process.stderr.write("------------------------------------\n\nComparison Error:\n" + (helpers.inspect(checkError.stack)) + "\n\nComparison Actual:\n" + (helpers.inspect((actualError != null ? actualError.stack : void 0) || (actualError != null ? actualError.message : void 0) || actualError)) + "\n\nComparison Expected:\n" + (helpers.inspect(expectedErrorMessage)) + "\n------------------------------------\n");
      throw checkError;
    }
    return null;
  };

  helpers.returnViaCallback = function(result) {
    return function() {
      return result;
    };
  };

  helpers.completeViaCallback = function(result, delay) {
    if (delay == null) {
      delay = 100;
    }
    return function(complete) {
      return helpers.wait(delay, function() {
        return complete(null, result);
      });
    };
  };

  helpers.returnErrorViaCallback = function(message) {
    return function() {
      if (message instanceof Error) {
        return message;
      } else {
        return new Error(message);
      }
    };
  };

  helpers.expectViaCallback = function() {
    var argsExpected;
    argsExpected = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return function() {
      var argsActual;
      argsActual = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return helpers.deepEqual(argsActual, argsExpected);
    };
  };

  helpers.expectErrorViaCallback = function(message, next) {
    return function(inputError) {
      var checkError;
      try {
        helpers.errorEqual(inputError, message);
      } catch (_error) {
        checkError = _error;
        if (next != null) {
          return next(checkError);
        } else {
          throw checkError;
        }
      }
      return typeof next === "function" ? next() : void 0;
    };
  };

}).call(this);
